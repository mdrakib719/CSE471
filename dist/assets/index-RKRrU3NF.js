import{A as R,S as p}from"./loadSts-Ci9z9p8e.js";import{c as v,d as M,f as L,g as N,C as z,E as j,h as q,I as B,e as G,M as H,P as U,R as V,b as J,a as P}from"./loadSts-Ci9z9p8e.js";import{s as C}from"./index-DItlgRb7.js";import{a as X,C as Y}from"./index-DItlgRb7.js";import"./index-xHyYyQbt.js";import"./index-DBY8eqGj.js";const m="us-east-1",T=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},g=async(e,t,o)=>{var c;const i=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return(c=o==null?void 0:o.debug)==null||c.call(o,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${i} (provider)`,`${n} (parent client)`,`${m} (STS default)`),i??n??m},x=(e,t)=>{let o;return async i=>{var l,s,S,f;if(!o){const{logger:d=(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.logger,region:A,requestHandler:u=(s=e==null?void 0:e.parentClientConfig)==null?void 0:s.requestHandler,credentialProviderLogger:E}=e,I=await g(A,(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.region,E),y=!h(u);o=new t({profile:(f=e==null?void 0:e.parentClientConfig)==null?void 0:f.profile,region:I,requestHandler:y?u:void 0,logger:d})}const{Credentials:n,AssumedRoleUser:c}=await o.send(new R(i));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${i.RoleArn}`);const a=T(c),r={accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...a&&{accountId:a}};return a&&C(r,"RESOLVED_ACCOUNT_ID","T"),C(r,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),r}},h=e=>{var t;return((t=e==null?void 0:e.metadata)==null?void 0:t.handlerProtocol)==="h2"},W=(e,t)=>t?class extends e{constructor(i){super(i);for(const n of t)this.middlewareStack.use(n)}}:e,F=(e={},t)=>x(e,W(p,t));export{X as $Command,v as AssumeRoleCommand,M as AssumeRoleResponseFilterSensitiveLog,R as AssumeRoleWithWebIdentityCommand,L as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,N as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,z as CredentialsFilterSensitiveLog,j as ExpiredTokenException,q as IDPCommunicationErrorException,B as IDPRejectedClaimException,G as InvalidIdentityTokenException,H as MalformedPolicyDocumentException,U as PackedPolicyTooLargeException,V as RegionDisabledException,J as STS,p as STSClient,P as STSServiceException,Y as __Client,F as getDefaultRoleAssumerWithWebIdentity};
